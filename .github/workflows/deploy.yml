name: CI/CD Pipeline - Deploy Node.js + Redis + RabbitMQ

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger via GitHub UI

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Wait for RabbitMQ to be ready
        run: |
          echo "‚è≥ Waiting for RabbitMQ..."
          for i in {1..10}; do
            if nc -z localhost 5672; then
              echo "‚úÖ RabbitMQ is ready!"
              exit 0
            fi
            echo "‚ùå RabbitMQ not ready, retrying in 5s..."
            sleep 5
          done
          echo "‚ùå RabbitMQ failed to start in time"
          exit 1

      - name: Run unit tests
        run: npm test
        env:
          DATABASE_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
          JWT_SECRET: ${{ vars.JWT }}
          SECRET: ${{ vars.SECRET }}
          PORT: 3001
          RABBITMQ_URL: amqp://rabbitmq

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Start SSH Agent and Add Key
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.AWS_SSH_KEY }}" | base64 --decode | tr -d '\r' | ssh-add -
          ssh-add -l  # Debugging: List added keys

      - name: Debug SSH Connection
        run: |
          echo "üîç Checking SSH Configuration..."
          echo "EC2 IP: ${{ secrets.AWS_EC2_IP }}"
          echo "SSH User: ${{ secrets.SSH_USER }}"
          ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.AWS_EC2_IP }} "echo '‚úÖ SSH Connected Successfully'"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.AWS_EC2_IP }} << 'EOF'
            echo "üöÄ Connected to EC2"
            cd /home/ec2-user
            echo "üóë Removing old project..."
            rm -rf YPClub-backend
            echo "üì• Cloning latest repo..."
            git clone https://github.com/your-github-user/YPClub-backend.git
            cd YPClub-backend
            echo "üõë Stopping old containers..."
            docker-compose down
            echo "üöÄ Starting new containers..."
            docker-compose up --build -d
            echo "‚úÖ Deployment complete!"
          EOF
